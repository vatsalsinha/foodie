{"version":3,"sources":["logoo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newitem","list","todoValue","id","Date","now","value","isDone","this","push","setState","ulist","filter","item","input","href","rel","integrity","crossorigin","src","logo","className","width","height","type","placeholder","required","onChange","e","updateinput","target","onClick","additem","map","key","name","checked","onchange","deleteitem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,mC,8MCyE5BC,G,wDAlEb,WAAYC,GACX,IAAD,8BACE,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJV,E,oDAQQC,GAEN,GAAiB,KAAdA,EACH,CACE,IAAMF,EAAU,CACdG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,GAEJN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GACVQ,KAAKE,SAAS,CACZT,OACAD,QAAS,Q,iCAKJG,GAET,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACTW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KAC9CK,KAAKE,SAAS,CAACT,KAAMU,M,kCAEXG,GAEVN,KAAKE,SAAS,CAACV,QAASc,M,+BAIzB,IAAD,OACE,OACE,6BACA,uBAAGC,KAAO,MAAV,cACE,0BAAMC,IAAI,aAAaD,KAAK,2EAA2EE,UAAU,0EAA0EC,YAAY,cACvM,yBAAKC,IAAOC,IAAOC,UAAY,OAAOC,MAAQ,MAAMC,OAAS,QAC7D,wBAAIF,UAAW,aAAf,YACA,oDAEE,6BACA,0BAAMA,UAAY,eAClB,2BAAOG,KAAO,OAAOH,UAAY,eAAeI,YAAc,yBAAyBnB,MAASE,KAAKT,MAAMC,QAAS0B,UAAQ,EAACC,SAAY,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOxB,UACxK,4BAAQe,UAAY,mCAAmCU,QAAW,kBAAM,EAAKC,QAAQ,EAAKjC,MAAMC,WAAhG,SACA,yBAAKqB,UAAY,QACf,4BACGb,KAAKT,MAAME,KAAKgC,KAAI,SAAApB,GAAS,OAC1B,wBAAIqB,IAAOrB,EAAKV,IAAhB,IAAqB,2BAAOqB,KAAK,WAAWW,KAAO,SAASC,QAAWvB,EAAKN,OAAQ8B,SAAU,eAA9F,IAAwG,wBAAIhB,UAAY,aAAhB,IAA+BR,EAAKP,MAApC,KAAxG,IAAyJ,4BAAQe,UAAY,mCAAmCU,QAAS,kBAAK,EAAKO,WAAWzB,EAAKV,MAA1F,cAE7J,gCAAK,2BAAOqB,KAAO,aAAnB,kBAA8C,4BAAQH,UAAU,oCAAlB,UAA9C,c,GA3DIkB,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ad0165b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoo.5eb27b67.png\";","import React from 'react';\nimport logo from './logoo.png';\nimport './App.css';\n\n\nclass App extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      newitem: \"\",\n      list: [],\n    }\n  }\n\n  additem(todoValue)\n  {\n    if(todoValue !== \"\")\n    {\n      const newitem = {\n        id: Date.now(),\n        value: todoValue,\n        isDone: false\n      };\n      const list = [...this.state.list]; //append all the values of the list array in this new list array\n      list.push(newitem);\n      this.setState({\n        list,\n        newitem: \"\"\n      }); //whenever you want to update anything inside the state, you never touch the state directly. To do so we use the setState method\n    }\n  }\n\n  deleteitem(id)\n  {\n    const list = [...this.state.list];\n    const ulist = list.filter(item => item.id !== id);\n    this.setState({list: ulist})\n  }\n  updateinput(input)\n  {\n    this.setState({newitem: input});\n  }\n\n  render()\n  {\n    return(\n      <div>\n      <a href = \"./\"> senorita </a>\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\"/>\n        <img src = {logo}  className = \"logo\" width = \"100\" height = \"100\"/>\n        <h1 className= \"app-title\"> Foodie </h1>\n        <div>\n          Add a Restaurant....\n          <br/>\n          <form className = \"form-signin\">\n          <input type = \"text\" className = \"form-control\" placeholder = \"Name of the Restaurant\" value = {this.state.newitem} required onChange = {e => this.updateinput(e.target.value)}/>\n          <button className = \"btn btn-lg btn-primary btn-block\" onClick = {() => this.additem(this.state.newitem)}> Add </button>\n          <div className = \"list\">\n            <ul>\n              {this.state.list.map(item => {return(\n                  <li key = {item.id}> <input type=\"checkbox\" name = \"idDone\" checked = {item.isDone} onchange={()=>{}}/> <h1 className = \"display-6\" > {item.value} </h1> <button className = \"btn btn-lg btn-primary btn-block\" onClick={()=> this.deleteitem(item.id)}>Delete</button></li>\n                )})}\n              <li> <input type = \"checkbox\"/> Record videos <button className=\"btn btn-lg btn-primary btn-block\">Delete</button> </li>\n            </ul>\n          </div>  \n          </form>\n        </div> \n      </div>\n      );\n  }\n}\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}